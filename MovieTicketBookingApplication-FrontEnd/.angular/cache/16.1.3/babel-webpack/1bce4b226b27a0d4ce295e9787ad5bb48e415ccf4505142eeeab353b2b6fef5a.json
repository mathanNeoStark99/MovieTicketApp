{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { pipe, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShhowService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'http://localhost:8000';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getAllShows() {\n    return this.httpClient.get(this.url + '/shows' + '/findall');\n    pipe(catchError(this.handleError));\n  }\n  addShow(sh, theatreId, screenId) {\n    return this.httpClient.post(this.url + '/shows/add?theatreId=' + theatreId + '&screenId=' + screenId, JSON.stringify(sh), this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getShowById(id) {\n    return this.httpClient.get(this.url + '/shows/view/' + id).pipe(catchError(this.handleError));\n  }\n  updateShow(show) {\n    console.log(show);\n    return this.httpClient.put(this.url + '/shows/update', JSON.stringify(show), this.httpOptions).pipe(catchError(this.handleError));\n  }\n  handleError(eResponse) {\n    if (eResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    } else {\n      console.log('Server Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    }\n    return throwError(eResponse.error.message);\n  }\n}\nShhowService.ɵfac = function ShhowService_Factory(t) {\n  return new (t || ShhowService)(i0.ɵɵinject(i1.HttpClient));\n};\nShhowService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShhowService,\n  factory: ShhowService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","pipe","throwError","catchError","ShhowService","constructor","httpClient","url","httpOptions","headers","getAllShows","get","handleError","addShow","sh","theatreId","screenId","post","JSON","stringify","getShowById","id","updateShow","show","console","log","put","eResponse","error","ErrorEvent","message","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/coder/project/workspace/MovieTicketBookingApplication-FrontEnd/src/app/show/shhow.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, pipe, throwError } from 'rxjs';\nimport { Show } from './show';\nimport { catchError } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShhowService {\n  private url = 'http://localhost:8000';\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n  constructor(private httpClient: HttpClient) {}\n  getAllShows(): Observable<Show[]> {\n    return this.httpClient.get<Show[]>(this.url + '/shows' + '/findall');\n    pipe(catchError(this.handleError));\n  }\n  addShow(sh: any, theatreId: number, screenId: number): Observable<any> {\n    return this.httpClient\n      .post<Show>(\n        this.url +\n          '/shows/add?theatreId=' +\n          theatreId +\n          '&screenId=' +\n          screenId,\n        JSON.stringify(sh),\n        this.httpOptions\n      )\n      .pipe(catchError(this.handleError));\n  }\n  getShowById(id: any): Observable<Show> {\n    return this.httpClient\n      .get<Show>(this.url + '/shows/view/' + id)\n      .pipe(catchError(this.handleError));\n  }\n\n  updateShow(show: any): Observable<any> {\n    console.log(show);\n    return this.httpClient\n      .put<Show>(\n        this.url + '/shows/update',\n        JSON.stringify(show),\n        this.httpOptions\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  handleError(eResponse: HttpErrorResponse) {\n    if (eResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    } else {\n      console.log('Server Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    }\n    return throwError(eResponse.error.message);\n  }\n}\n"],"mappings":"AACA,SAGEA,WAAW,QACN,sBAAsB;AAC7B,SAAqBC,IAAI,EAAEC,UAAU,QAAQ,MAAM;AAEnD,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IANtB,KAAAC,GAAG,GAAG,uBAAuB;IACrC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAC4C;EAC7CU,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAS,IAAI,CAACJ,GAAG,GAAG,QAAQ,GAAG,UAAU,CAAC;IACpEN,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACpC;EACAC,OAAOA,CAACC,EAAO,EAAEC,SAAiB,EAAEC,QAAgB;IAClD,OAAO,IAAI,CAACV,UAAU,CACnBW,IAAI,CACH,IAAI,CAACV,GAAG,GACN,uBAAuB,GACvBQ,SAAS,GACT,YAAY,GACZC,QAAQ,EACVE,IAAI,CAACC,SAAS,CAACL,EAAE,CAAC,EAClB,IAAI,CAACN,WAAW,CACjB,CACAP,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EACAQ,WAAWA,CAACC,EAAO;IACjB,OAAO,IAAI,CAACf,UAAU,CACnBK,GAAG,CAAO,IAAI,CAACJ,GAAG,GAAG,cAAc,GAAGc,EAAE,CAAC,CACzCpB,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAU,UAAUA,CAACC,IAAS;IAClBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAO,IAAI,CAACjB,UAAU,CACnBoB,GAAG,CACF,IAAI,CAACnB,GAAG,GAAG,eAAe,EAC1BW,IAAI,CAACC,SAAS,CAACI,IAAI,CAAC,EACpB,IAAI,CAACf,WAAW,CACjB,CACAP,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAA,WAAWA,CAACe,SAA4B;IACtC,IAAIA,SAAS,CAACC,KAAK,YAAYC,UAAU,EAAE;MACzCL,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGE,SAAS,CAACC,KAAK,CAACE,OAAO,CAAC;MAC5DN,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGE,SAAS,CAACI,MAAM,CAAC;KAC/C,MAAM;MACLP,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGE,SAAS,CAACC,KAAK,CAACE,OAAO,CAAC;MAC5DN,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGE,SAAS,CAACI,MAAM,CAAC;;IAEhD,OAAO7B,UAAU,CAACyB,SAAS,CAACC,KAAK,CAACE,OAAO,CAAC;EAC5C;;AAnDW1B,YAAY,C;mBAAZA,YAAY,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZ/B,YAAY,C;SAAZA,YAAY;EAAAgC,OAAA,EAAZhC,YAAY,CAAAiC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}