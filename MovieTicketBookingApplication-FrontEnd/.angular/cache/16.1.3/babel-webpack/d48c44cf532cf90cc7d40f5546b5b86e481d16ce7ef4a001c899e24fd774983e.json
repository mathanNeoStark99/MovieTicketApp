{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { pipe, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ScreService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'http://localhost:8000';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getAllScreens() {\n    return this.httpClient.get(this.url + '/screens' + '/findall');\n    pipe(catchError(this.handleError));\n  }\n  addScreen(screen, theatreId) {\n    return this.httpClient.post(this.url + '/screens/add?theatreId=' + theatreId, JSON.stringify(screen), this.httpOptions).pipe(catchError(this.handleError));\n  }\n  updateScreen(screen) {\n    console.log(screen);\n    return this.httpClient.put(this.url + '/screens/update', JSON.stringify(screen), this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getScreenById(id) {\n    return this.httpClient.get(this.url + '/screens/viewScreen/' + id).pipe(catchError(this.handleError));\n  }\n  getTheatre(id) {\n    return this.httpClient.get(this.url + '/screens/theatre/' + id).pipe(catchError(this.handleError));\n  }\n  handleError(eResponse) {\n    if (eResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    } else {\n      console.log('Server Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    }\n    return throwError(eResponse.error.message);\n  }\n}\nScreService.ɵfac = function ScreService_Factory(t) {\n  return new (t || ScreService)(i0.ɵɵinject(i1.HttpClient));\n};\nScreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ScreService,\n  factory: ScreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","pipe","throwError","catchError","ScreService","constructor","httpClient","url","httpOptions","headers","getAllScreens","get","handleError","addScreen","screen","theatreId","post","JSON","stringify","updateScreen","console","log","put","getScreenById","id","getTheatre","eResponse","error","ErrorEvent","message","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/coder/project/workspace/MovieTicketBookingApplication-FrontEnd/src/app/screen/scre.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, pipe, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreService {\n  private url = 'http://localhost:8000';\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n  constructor(private httpClient: HttpClient) {}\n  getAllScreens(): Observable<Screen[]> {\n    return this.httpClient.get<Screen[]>(this.url + '/screens' + '/findall');\n    pipe(catchError(this.handleError));\n  }\n\n  addScreen(screen: any, theatreId: any): Observable<any> {\n    return this.httpClient\n      .post<Screen>(\n        this.url + '/screens/add?theatreId=' + theatreId,\n        JSON.stringify(screen),\n        this.httpOptions\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  updateScreen(screen: any): Observable<any> {\n    console.log(screen);\n    return this.httpClient\n      .put<any>(\n        this.url + '/screens/update',\n        JSON.stringify(screen),\n        this.httpOptions\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  getScreenById(id: any): Observable<any> {\n    return this.httpClient\n      .get<any>(this.url + '/screens/viewScreen/' + id)\n      .pipe(catchError(this.handleError));\n  }\n\n  getTheatre(id: any): Observable<any> {\n    return this.httpClient\n      .get<any>(this.url + '/screens/theatre/' + id)\n      .pipe(catchError(this.handleError));\n  }\n\n  handleError(eResponse: HttpErrorResponse) {\n    if (eResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    } else {\n      console.log('Server Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    }\n    return throwError(eResponse.error.message);\n  }\n}\n"],"mappings":"AACA,SAGEA,WAAW,QACN,sBAAsB;AAC7B,SAAqBC,IAAI,EAAEC,UAAU,QAAQ,MAAM;AACnD,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IANtB,KAAAC,GAAG,GAAG,uBAAuB;IACrC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAC4C;EAC7CU,aAAaA,CAAA;IACX,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAW,IAAI,CAACJ,GAAG,GAAG,UAAU,GAAG,UAAU,CAAC;IACxEN,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACpC;EAEAC,SAASA,CAACC,MAAW,EAAEC,SAAc;IACnC,OAAO,IAAI,CAACT,UAAU,CACnBU,IAAI,CACH,IAAI,CAACT,GAAG,GAAG,yBAAyB,GAAGQ,SAAS,EAChDE,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,EACtB,IAAI,CAACN,WAAW,CACjB,CACAP,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAO,YAAYA,CAACL,MAAW;IACtBM,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC;IACnB,OAAO,IAAI,CAACR,UAAU,CACnBgB,GAAG,CACF,IAAI,CAACf,GAAG,GAAG,iBAAiB,EAC5BU,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,EACtB,IAAI,CAACN,WAAW,CACjB,CACAP,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAW,aAAaA,CAACC,EAAO;IACnB,OAAO,IAAI,CAAClB,UAAU,CACnBK,GAAG,CAAM,IAAI,CAACJ,GAAG,GAAG,sBAAsB,GAAGiB,EAAE,CAAC,CAChDvB,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAa,UAAUA,CAACD,EAAO;IAChB,OAAO,IAAI,CAAClB,UAAU,CACnBK,GAAG,CAAM,IAAI,CAACJ,GAAG,GAAG,mBAAmB,GAAGiB,EAAE,CAAC,CAC7CvB,IAAI,CAACE,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAA,WAAWA,CAACc,SAA4B;IACtC,IAAIA,SAAS,CAACC,KAAK,YAAYC,UAAU,EAAE;MACzCR,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGK,SAAS,CAACC,KAAK,CAACE,OAAO,CAAC;MAC5DT,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGK,SAAS,CAACI,MAAM,CAAC;KAC/C,MAAM;MACLV,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGK,SAAS,CAACC,KAAK,CAACE,OAAO,CAAC;MAC5DT,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGK,SAAS,CAACI,MAAM,CAAC;;IAEhD,OAAO5B,UAAU,CAACwB,SAAS,CAACC,KAAK,CAACE,OAAO,CAAC;EAC5C;;AAvDWzB,WAAW,C;mBAAXA,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX9B,WAAW,C;SAAXA,WAAW;EAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}