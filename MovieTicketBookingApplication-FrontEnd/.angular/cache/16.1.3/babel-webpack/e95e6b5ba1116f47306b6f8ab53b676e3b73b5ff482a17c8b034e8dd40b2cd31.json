{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LogginService {\n  getLoginStatus() {\n    return this.isLoginStatus;\n  }\n  setLoginStatus(status) {\n    this.isLoginStatus = status;\n  }\n  getUserRole() {\n    return this.userRole;\n  }\n  setUserRole(role) {\n    this.userRole = role;\n  }\n  getCustomerId() {\n    return this.customerId;\n  }\n  setCustomerId(id) {\n    this.customerId = id;\n  }\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'http://localhost:8000';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  login(username, password) {\n    return this.httpClient.post(this.url + '/login/' + username + '/' + password, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  logout() {\n    this.isLoginStatus = false;\n    this.userRole = false;\n    return this.httpClient.post(this.url + '/logout', this.httpOptions).pipe(catchError(this.handleError));\n  }\n  handleError(eResponse) {\n    if (eResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    } else {\n      console.log('Server Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    }\n    return throwError(eResponse.error.message);\n  }\n}\nLogginService.ɵfac = function LogginService_Factory(t) {\n  return new (t || LogginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLogginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogginService,\n  factory: LogginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","throwError","catchError","LogginService","getLoginStatus","isLoginStatus","setLoginStatus","status","getUserRole","userRole","setUserRole","role","getCustomerId","customerId","setCustomerId","id","constructor","httpClient","url","httpOptions","headers","login","username","password","post","pipe","handleError","logout","eResponse","error","ErrorEvent","console","log","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/coder/project/workspace/MovieTicketBookingApplication-FrontEnd/src/app/login/loggin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, pipe, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Login } from './login';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogginService {\n  private url = 'http://localhost:8000';\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  public isLoginStatus!: boolean;\n  public userRole: boolean;\n  public customerId: number;\n\n  getLoginStatus() {\n    return this.isLoginStatus;\n  }\n  setLoginStatus(status: any) {\n    this.isLoginStatus = status;\n  }\n\n  getUserRole() {\n    return this.userRole;\n  }\n\n  setUserRole(role: any) {\n    this.userRole = role;\n  }\n\n  getCustomerId() {\n    return this.customerId;\n  }\n\n  setCustomerId(id: any) {\n    this.customerId = id;\n  }\n\n  constructor(private httpClient: HttpClient) {}\n\n  login(username: any, password: any): Observable<any> {\n    return this.httpClient\n      .post<Login>(\n        this.url + '/login/' + username + '/' + password,\n        this.httpOptions\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  logout(): Observable<any> {\n    this.isLoginStatus = false;\n    this.userRole = false;\n    return this.httpClient\n      .post<Login>(this.url + '/logout', this.httpOptions)\n      .pipe(catchError(this.handleError));\n  }\n\n  handleError(eResponse: HttpErrorResponse) {\n    if (eResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    } else {\n      console.log('Server Side Error =' + eResponse.error.message);\n      console.log('Status Code=' + eResponse.status);\n    }\n    return throwError(eResponse.error.message);\n  }\n}\n"],"mappings":"AACA,SAGEA,WAAW,QACN,sBAAsB;AAC7B,SAA2BC,UAAU,QAAQ,MAAM;AACnD,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,aAAa;EAYxBC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACC,aAAa;EAC3B;EACAC,cAAcA,CAACC,MAAW;IACxB,IAAI,CAACF,aAAa,GAAGE,MAAM;EAC7B;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEAC,WAAWA,CAACC,IAAS;IACnB,IAAI,CAACF,QAAQ,GAAGE,IAAI;EACtB;EAEAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACC,UAAU;EACxB;EAEAC,aAAaA,CAACC,EAAO;IACnB,IAAI,CAACF,UAAU,GAAGE,EAAE;EACtB;EAEAC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAlCtB,KAAAC,GAAG,GAAG,uBAAuB;IACrC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIpB,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EA6B4C;EAE7CqB,KAAKA,CAACC,QAAa,EAAEC,QAAa;IAChC,OAAO,IAAI,CAACN,UAAU,CACnBO,IAAI,CACH,IAAI,CAACN,GAAG,GAAG,SAAS,GAAGI,QAAQ,GAAG,GAAG,GAAGC,QAAQ,EAChD,IAAI,CAACJ,WAAW,CACjB,CACAM,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACwB,WAAW,CAAC,CAAC;EACvC;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACtB,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACI,QAAQ,GAAG,KAAK;IACrB,OAAO,IAAI,CAACQ,UAAU,CACnBO,IAAI,CAAQ,IAAI,CAACN,GAAG,GAAG,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACnDM,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACwB,WAAW,CAAC,CAAC;EACvC;EAEAA,WAAWA,CAACE,SAA4B;IACtC,IAAIA,SAAS,CAACC,KAAK,YAAYC,UAAU,EAAE;MACzCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGJ,SAAS,CAACC,KAAK,CAACI,OAAO,CAAC;MAC5DF,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGJ,SAAS,CAACrB,MAAM,CAAC;KAC/C,MAAM;MACLwB,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGJ,SAAS,CAACC,KAAK,CAACI,OAAO,CAAC;MAC5DF,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGJ,SAAS,CAACrB,MAAM,CAAC;;IAEhD,OAAON,UAAU,CAAC2B,SAAS,CAACC,KAAK,CAACI,OAAO,CAAC;EAC5C;;AA/DW9B,aAAa,C;mBAAbA,aAAa,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAblC,aAAa,C;SAAbA,aAAa;EAAAmC,OAAA,EAAbnC,aAAa,CAAAoC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}